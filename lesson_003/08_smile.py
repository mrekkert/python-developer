# -*- coding: utf-8 -*-

# (определение функций)
import random

import simple_draw
import simple_draw as sd

# Написать функцию отрисовки смайлика по заданным координатам
# Форма рожицы-смайлика на ваше усмотрение
# Параметры функции: кордината X, координата Y, цвет.
# Вывести 10 смайликов в произвольных точках экрана.
cord_x, cord_y = 100, 100


def smile(cord_x, cord_y, color):
    point_x = sd.get_point(cord_x + 10, cord_y + 50)
    point_y = sd.get_point(cord_x + 150, cord_y + 150)
    sd.ellipse(left_bottom=point_x, right_top=point_y, color=color, width=2)

    for x in range(55, 110, 50):
        point = sd.get_point(cord_x + x, cord_y + 125)
        sd.circle(center_position=point, radius=6, color=color, width=1)

    x = sd.get_point(cord_x + 40, cord_y + 85)
    y = sd.get_point(cord_x + 60, cord_y + 70)
    z = sd.get_point(cord_x + 100, cord_y + 70)
    z_1 = sd.get_point(cord_x + 120, cord_y + 85)
    point_list = (x, y, z, z_1)
    sd.lines(point_list=point_list, color=color, closed=False, width=3)


# вот так? 	(*^.^*)   Верно, однако мне надо удостовериться, что вы верно всё понимаете
#  Имена параметров, которые используются в функции, никак не связаны с именами переменных вне функции
#  Сейчас они у вас одинаковые, но это скорее вносит путанницу
#  Представьте, что у вас для записи всемх имен переменных есть блокнот
#  Каждую созданную переменную вы записываете в этот блокнот. Но если вы создаете переменную внутри функции
#  Они попадают в другой блокнот :) Отдельный
#  И, что интересно, создав переменную внутри функции, вы не сможете её как обычно использовать в коде
#  Например:
def example():
    a = 50
# print(a)  #  Пайтон ругается и выдаёт "NameError: name 'a' is not defined", что значит "имя 'a' не определено"
#  Хотя мы то с вами видим, вон оно, парой строк выше задано.
#  Это наглядно демонстрирует, что внутри функции, переменные создаются отдельно от общего кода
#  Однако путанница создаётся при обратном примере
a = 50
def example():
    print(a)

example()  #  Пайтон, выполняя функцию, ищет 'a' сперва внутри функции, а затем снаружи
#  Поэтому, когда вы использовали имя внешней(снаружи функции) переменной с координатами
#  Пайтон смог её найти и выполнить код

#  Что касается параметров - они берут значения снаружи (не имена, а только значения)
#  И создают переменные с этими значениями внутри функции
#  Это значит, что мы можем назвать переменную снаружи как угодно,
#  И лучше не дублировать названия, использованные в функции

#  Для наглядности я изменю названия ваших переменных:
for _ in range(10):
    center_x = random.randint(10, 500)
    center_y = random.randint(10, 500)
    color = sd.random_color()
    smile(cord_x=center_x, cord_y=center_y, color=color)
# всё, я понял. но можно эти тудушки оставить тут на всякий случай?)
simple_draw.pause()

#зачет!